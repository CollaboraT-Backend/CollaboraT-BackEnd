generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id              String           @id @default(uuid()) @db.Uuid
  name            String           @unique @db.VarChar(255)
  email           String           @unique @db.VarChar(255)
  password        String           @db.VarChar(255)
  nit             String           @unique @db.VarChar(255)
  role            String           @default("company") @db.VarChar(50)
  createdAt       DateTime         @default(now()) @db.Timestamp(6)
  updatedAt       DateTime         @updatedAt @db.Timestamp(6)
  deletedAt       DateTime?        @db.Timestamp(6)
  collaborators   Collaborator[]
  profilePictures ProfilePicture[]
  projects        Project[]

  @@map("companies")
}

model Collaborator {
  id               String             @id @default(uuid()) @db.Uuid
  name             String             @db.VarChar(255)
  email            String             @unique @db.VarChar(255)
  password         String             @db.VarChar(255)
  role             CollaboratorRole   @default(collaborator)
  companyId        String             @db.Uuid
  occupationId     Int
  createdAt        DateTime           @default(now()) @db.Timestamp(6)
  updatedAt        DateTime           @updatedAt @db.Timestamp(6)
  deletedAt        DateTime?          @db.Timestamp(6)
  company          Company            @relation(fields: [companyId], references: [id])
  occupation       Occupation         @relation(fields: [occupationId], references: [id])
  profilePictures  ProfilePicture[]
  projects         Project[]
  TaskComment      TaskComment[]
  tasksAssigned    Task[]             @relation("CollaboratorAssigned")
  tasksCreated     Task[]             @relation("CollaboratorCreated")
  TeamCollaborator TeamCollaborator[]

  @@map("collaborators")
}

model Occupation {
  id            Int              @id @default(autoincrement())
  name          String           @db.VarChar(255)
  collaborators Collaborator[]
  tasks         Task[]

  @@map("occupations")
}

model Project {
  id           String        @id @default(uuid()) @db.Uuid
  name         String        @db.VarChar(255)
  description  String?
  goals        String?
  deadline     DateTime      @db.Date
  companyId    String        @db.Uuid
  leaderId     String        @db.Uuid
  createdAt    DateTime      @default(now()) @db.Timestamp(6)
  updatedAt    DateTime      @updatedAt @db.Timestamp(6)
  deletedAt    DateTime?     @db.Timestamp(6)
  status       ProjectStatus @default(active)
  projectTeams ProjectTeam[]
  company      Company       @relation(fields: [companyId], references: [id])
  leader       Collaborator  @relation(fields: [leaderId], references: [id])
  tasks        Task[]

  @@map("projects")
}

model ProjectTeam {
  id                String             @id @default(uuid()) @db.Uuid
  projectId         String             @db.Uuid
  createdAt         DateTime           @default(now()) @db.Timestamp(6)
  updatedAt         DateTime           @updatedAt @db.Timestamp(6)
  project           Project            @relation(fields: [projectId], references: [id])
  teamCollaborators TeamCollaborator[]

  @@map("project_teams")
}

model TeamCollaborator {
  id             String       @id @default(uuid()) @db.Uuid
  teamId         String       @db.Uuid
  collaboratorId String       @db.Uuid
  createdAt      DateTime     @default(now()) @db.Timestamp(6)
  deletedAt      DateTime?    @db.Timestamp(6)
  collaborator   Collaborator @relation(fields: [collaboratorId], references: [id])
  projectTeam    ProjectTeam  @relation(fields: [teamId], references: [id])

  @@map("team_collaborators")
}

model Task {
  id                     String           @id @default(uuid()) @db.Uuid
  title                  String           @db.VarChar(255)
  description            String?
  dueDate                DateTime         @db.Date
  startDate              DateTime         @db.Date
  priority               TaskPriority
  status                 TaskStatus       @default(pending)
  projectId              String           @db.Uuid
  collaboratorAssignedId String?          @db.Uuid
  occupationId Int
  createdById            String           @db.Uuid
  createdAt              DateTime         @default(now()) @db.Timestamp(6)
  updatedAt              DateTime         @updatedAt @db.Timestamp(6)
  deletedAt              DateTime?        @db.Timestamp(6)
  occupation             Occupation       @relation(fields: [occupationId], references: [id])
  comments               TaskComment[]
  collaboratorAssigned   Collaborator?     @relation("CollaboratorAssigned", fields: [collaboratorAssignedId], references: [id])
  createdBy              Collaborator   @relation("CollaboratorCreated", fields: [createdById], references: [id])
  project                Project          @relation(fields: [projectId], references: [id])

  @@map("tasks")
}

model TaskComment {
  id        String       @id @default(uuid()) @db.Uuid
  comment   String
  taskId    String       @db.Uuid
  madeById  String       @db.Uuid
  createdAt DateTime     @default(now()) @db.Timestamp(6)
  madeBy    Collaborator @relation(fields: [madeById], references: [id])
  task      Task         @relation(fields: [taskId], references: [id])

  @@map("task_comments")
}

model ProfilePicture {
  id             String        @id @default(uuid()) @db.Uuid
  imageUrl       String
  collaboratorId String?       @db.Uuid
  companyId      String?       @db.Uuid
  collaborator   Collaborator? @relation(fields: [collaboratorId], references: [id])
  company        Company?      @relation(fields: [companyId], references: [id])

  @@map("profile_pictures")
}

model Entity {
  id          Int          @id @default(autoincrement())
  name        String       @db.VarChar(255)
  permissions Permission[]

  @@map("entites")
}

model Permission {
  id        String         @id @default(uuid()) @db.Uuid
  role      PermissionRole
  entityId  Int
  canGet    Boolean
  canGetOne Boolean
  canCreate Boolean
  canUpdate Boolean
  canDelete Boolean
  entity    Entity         @relation(fields: [entityId], references: [id])

  @@map("permissions")
}

enum CollaboratorRole {
  collaborator
  leader
}

enum ProjectStatus {
  active
  completed
  archived
}

enum TaskPriority {
  low
  medium
  high
}

enum TaskStatus {
  pending
  in_progress
  completed
}

enum PermissionRole {
  admin
  company
  leader
  collaborator
}
